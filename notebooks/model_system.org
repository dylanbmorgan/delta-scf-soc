#+title: Model System
#+startup: latexpreview inlineimages
#+latex_header: \usepackage{braket}
#+auto_tangle: t
#+property: header-args:julia :session jl :results silent
#+property: header-args :tangle ../scripts/DeltaSCFSOC.jl

* Setup
** Module :noexport:
Start a module here for tangling with the jl file. We will prevent it from running from here as it will error without an ~end~ clause. Also do not export it

#+begin_src julia :noeval :exports none
module DeltaSCFSOC
#+end_src

** Imports
#+begin_src julia
using DrWatson
quickactivate("$(pwd())../")
using LinearAlgebra, Plots
#+end_src

** Constants
#+begin_src julia
const ħ = 1.0545718e-34
#+end_src

* Model System
We can set up a spin-orbit coupling Hamiltonian for a model system, where the wavefunction is represented in a basis of the $$\ell$$, $$m_{\ell}$$, and $$m_s$$ quantum numbers for a given $$n$$.

#+name: model-H
\begin{equation}
    \Braket{ \Psi_{\ell, m_{\ell}, m_s} | \lambda \hat{L} \cdot \hat{S} | \Psi_{\ell, m_{\ell}, m_s} }
\end{equation}

Where $$\hat{L}$$ is the orbital angular momentum operator, $$\hat{S}$$ is the spin operator, and $$\lambda$$ is the spin-orbit coupling strength, which is dependent on the atomic number of the elements in the solid.

** Wavefunction
Setup the wavefunction as a ~mutable struct~ using the quantum numbers as a basis. This will create a vector where each element is a state defined by the quantum numbers

#+begin_src julia
@doc raw"""
    Wavefunction(n::Int64)

Define a wavefunction for a given n in a basis of $l$, $m_l$, and $m_s$

The length of the wavefunction vector is given by
```math
\sum_{n=1}^{n} \sum_{l=0}^{n-1} 2(2l + 1)
```

# Examples
```jldoctest
julia> Ψ = Wavefunction(2)
```
"""
mutable struct Wavefunction
    Ψ::Vector{Tuple{Int64,Complex{Int64},ComplexF64}}
    l::Vector{Int16}
    m_l::Vector{Complex{Int64}}
    m_s::Vector{ComplexF64}

    function Wavefunction(n::Int64)
        # Ensure n is greater than 0
        if n < 0
            throw(ArgumentError("n must be ∈ ℕ₀"))
        end

        # Calculate the total number of combinations
        len_Ψ = sum((2 * l + 1) * 2 for l = 0:n-1)

        # Create a matrix for all possible values of quantum numbers
        Ψ = Vector{Tuple{Int64,Complex{Int64},ComplexF64}}(undef, len_Ψ)

        idx = 1
        for l = 0:n-1
            for m_l = -l:l
                for m_s = -0.5:0.5
                    Ψ[idx] = (l, m_l, m_s)
                    idx += 1
                end
            end
        end

        # Save vectors of the quantum numbers
        l = [Ψ[i][1] for i = 1:len_Ψ]
        m_l = [Ψ[i][2] for i = 1:len_Ψ]
        m_s = [Ψ[i][3] for i = 1:len_Ψ]

        new(Ψ, l, m_l, m_s)
    end
end
#+end_src

Now, initialise the wavefunction when $$n=2$$

#+begin_src julia :results replace :tangle no :exports code
Ψ = Wavefunction(2)
#+end_src

#+RESULTS:
: Wavefunction(Tuple{Int64, Complex{Int64}, ComplexF64}[(0, 0 + 0im, -0.5 + 0.0im), (0, 0 + 0im, 0.5 + 0.0im), (1, -1 + 0im, -0.5 + 0.0im), (1, -1 + 0im, 0.5 + 0.0im), (1, 0 + 0im, -0.5 + 0.0im), (1, 0 + 0im, 0.5 + 0.0im), (1, 1 + 0im, -0.5 + 0.0im), (1, 1 + 0im, 0.5 + 0.0im)], Int16[0, 0, 1, 1, 1, 1, 1, 1], Complex{Int64}[0 + 0im, 0 + 0im, -1 + 0im, -1 + 0im, 0 + 0im, 0 + 0im, 1 + 0im, 1 + 0im], ComplexF64[-0.5 + 0.0im, 0.5 + 0.0im, -0.5 + 0.0im, 0.5 + 0.0im, -0.5 + 0.0im, 0.5 + 0.0im, -0.5 + 0.0im, 0.5 + 0.0im])

* Define the Operator
** Uncertainty Principle
The uncertainty principle states that when two observable operators do not commute, they cannot be measured simultaneously, and the more accurately that one is known, the less accurately the other can be known. For angular momentum, this is given by the Robertson-Schrödinger relation

\begin{equation}
    \sigma_{J_x} \sigma_{J_y} \geq \frac{\hbar}{2} | \langle J_z \rangle |
\end{equation}

where $$\sigma_J$$ is the standard deviation in the measured values of $$J$$. $$J$$ can also be replaced by $$L$$ or $$S$$, and $$x, y, z$$ can be rearranged in any order. However it is still possible to measure $$J^2$$ and any one component of $$J$$. These values are characterised by $$\ell$$ and $$m$$.

** Derivation
In order to calculate [[model]], we need to apply the operators to the ket and work out the prefactors.

#+name: angular-spin-relation
\begin{equation}
    \begin{split}
        \hat{J}^2 &= \left( \hat{L} + \hat{S} \right)^2 \\
        &= \hat{L}^2 + \hat{S}^2 + 2\hat{L} \cdot \hat{S} \\
        &= \hat{L}^2 + \hat{S}^2 + 2\hat{L}_z\hat{S}_z + \hat{L}_+\hat{S}_- + \hat{L}_-\hat{S}_+ \\
    \end{split}
\end{equation}

However, we can neglect the $$\hat{L}^2 + \hat{S}^2$$ terms as they are not included in our Hamiltonian in [[model]]. Now, to define how each operator acts on the ket

\begin{equation}
    \begin{split}
        \hat{L}_z \Ket{ \psi_{\ell, m_{\ell}, m_s} } &= \hbar m_{\ell} \Ket{ \psi_{\ell, m_{\ell}, m_s} } \\
        \hat{S}_z \Ket{ \psi_{\ell, m_{\ell}, m_s} } &= \hbar m_S \Ket{ \psi_{\ell, m_{\ell}, m_s} }
    \end{split}
\end{equation}

\begin{equation}
    \begin{split}
        L_+ \Ket{ \psi_{\ell, m_{\ell}, m_s} } &= \left[ (\ell + m_{\ell} + 1)(l - m_{\ell}) \right]^{\frac{1}{2}} \hbar \Ket{ \psi_{\ell, m_{\ell} + 1, m_s} } \\
        L_- \Ket{ \psi_{\ell, m_{\ell}, m_s} } &= \left[ (\ell - m_{\ell} + 1)(l + m_{\ell}) \right]^{\frac{1}{2}} \hbar \Ket{ \psi_{\ell, m_{\ell} - 1, m_s} }
    \end{split}
\end{equation}

\begin{equation}
    \begin{split}
        S_+ \Ket{ \psi_{\ell, m_{\ell}, m_s} } &= \left[ (s + m_s + 1)(s - m_s) \right]^{\frac{1}{2}} \hbar \Ket{ \psi_{\ell, m_{\ell}, m_s + 1} } \\
        S_- \Ket{ \psi_{\ell, m_{\ell}, m_s} } &= \left[ (s - m_s + 1)(s + m_s) \right]^{\frac{1}{2}} \hbar \Ket{ \psi_{\ell, m_{\ell}, m_s - 1} } \\
    \end{split}
\end{equation}

Then, substituting [[angular-spin-relation]] into [[model-H]], and applying $$\lambda (\hat{L} \cdot \hat{S})$$ to $$\Ket{ \psi_{\ell, m_{\ell}, m_s} }$$:

\begin{equation}
    \implies \lambda (\hat{L} \cdot \hat{S}) \Ket{ \Psi_{\ell, m_{\ell}, m_s} } = \frac{\lambda \hbar}{2}(m_{\ell} \cdot m_s) \Ket{ \psi_{\ell, m_{\ell}, m_s} } + \frac{\lambda \hbar^2}{2} \left[ (\ell^2 + \ell - 3m_{\ell})(s^2 + s - 3m_s) \right]^{\frac{1}{2}} \Ket{ \psi_{\ell, m_{\ell} + 1, m_s - 1} } + \frac{\lambda \hbar^2}{2} \left[ (\ell^2 + \ell - m_{\ell})(s^2 + s - m_s) \right]^{\frac{1}{2}} \Ket{ \psi_{\ell, m_{\ell} - 1, m_s + 1} }
\end{equation}

\begin{equation}
    \implies \Braket{ \Psi_{\ell', m_{\ell}', m_s'} | \lambda (\hat{L} \cdot \hat{S}) | \Psi_{\ell, m_{\ell}, m_s} } = \lambda \Braket{ \psi_{\ell', m_{\ell}', m_s'} | \hat{L}_z \hat{S}_z | \psi_{\ell, m_{\ell}, m_s} } + \lambda \Braket{ \psi_{\ell', m_{\ell}', m_s'} | \hat{L}_+ \hat{S}_- | \psi_{\ell, m_{\ell} + 1, m_s - 1} } + \lambda \Braket{ \psi_{\ell', m_{\ell}', m_s'} | \hat{L}_- \hat{S}_- | \psi_{\ell, m_{\ell} - 1, m_s + 1} }
\end{equation}

where

\begin{equation}
    \Braket{ \psi_{\ell', m_{\ell}', m_s'} | \psi_{\ell, m_{\ell}, m_s} } = \delta_{\ell' \ell} \delta_{m_{\ell}' m_{\ell}} \delta_{m_s' m_s}
\end{equation}

* Setup the Eigenvalue Problem
** Operator(s) on Ket
Define how the Hamiltonian acts on the wavefunction in the ket

#+begin_src julia
@doc raw"""
    Lz_Sz_prefactor(Ψ::Wavefunction, λ::Float64)::Vector{ComplexF64}

Calculate the z angular momentum spin operator prefactor

```math
\frac{\lambda \hbar}{2} (m_l \cdot m_s) | \psi_{\ell, m_{\ell}, m_s} \rangle
```
"""
function Lz_Sz_prefactor(Ψ::Wavefunction, λ::Float64)::Vector{ComplexF64}
    ((λ * ħ) / 2) .* (Ψ.m_l .* Ψ.m_s)
end
#+end_src

#+begin_src julia
@doc raw"""
    l_up_s_down_prefactor(ψ::Wavefunction, λ::float64)::Vector{ComplexF64}

Calculate the L_+S_- operator prefactor.

```math
\frac{\lambda \hbar^2}{2} \left[ (\ell^2 + \ell - 3m_{\ell})(s^2 + s - 3m_s) \right]^{\frac{1}{2}} | \psi_{\ell, m_{\ell} + 1, m_s - 1} \rangle
```
"""
function L_up_S_down_prefactor(Ψ::Wavefunction, λ::Float64)::Vector{ComplexF64}
    ((λ * ħ^2) / 2) .*
    ((Ψ.l .^ 2 .+ Ψ.l .- (3 .* Ψ.m_l)) .* (Ψ.m_s .^ 2 .+ Ψ.m_s .- (3 .* Ψ.m_s))) .^ 0.5
end
#+end_src

#+begin_src julia
@doc raw"""
    L_down_S_up_prefactor(Ψ::Wavefunction, λ::Float64)::Vector{ComplexF64}

Calculate the L_-S_+ operator prefactor.

```math
\frac{\lambda \hbar^2}{2} \left[ (\ell^2 + \ell - m_{\ell})(s^2 + s - m_s) \right]^{\frac{1}{2}} | \psi_{\ell, m_{\ell} - 1, m_s + 1} \rangle
```
"""
function L_down_S_up_prefactor(Ψ::Wavefunction, λ::Float64)::Vector{ComplexF64}
    ((λ * ħ^2) / 2) .* ((Ψ.l .^ 2 .+ Ψ.l .- Ψ.m_l) .* (Ψ.m_s .^ 2 .+ Ψ.m_s .- Ψ.m_s)) .^ 0.5
end
#+end_src

** Bra on ket
Additionally create $$\Bra{\psi'}$$ and enact the operators on $$\Ket{\psi}$$ to calculate the inner product

#+begin_src julia
@doc raw"""
    Lz_Sz_kron(Ψ::Wavefunction)::BitMatrix

Use logical indexing to apply prefactors based on kronecker delta for the Lz_Sz operator.

```math
\langle \Psi_{\ell', m_{\ell}', m_s'} | L_zS_z | \Psi_{\ell, m_{\ell}, m_s} \rangle = \delta_{l' l} \delta_{m_{\ell}' m_{\ell}} \delta_{m_s' m_s}
```
"""
function Lz_Sz_kron(Ψ::Wavefunction)::BitMatrix
    Ψ.l .== Ψ.l' .&& Ψ.m_l .== Ψ.m_l' .&& Ψ.m_s .== Ψ.m_s'
end
#+end_src

#+begin_src julia
@doc raw"""
    L_up_S_down_kron(Ψ::Wavefunction)::BitMatrix

Use logical indexing to apply prefactors based on kronecker delta for the L+_S- operator.

```math
\langle \Psi_{\ell', m_{\ell}', m_s'} | L_+S_- | \Psi_{\ell, m_{\ell}+1, m_s-1} \rangle = \delta_{l' l} \delta_{m_{\ell}' m_{\ell}} \delta_{m_s' m_s}
```
"""
function L_up_S_down_kron(Ψ::Wavefunction)::BitMatrix
    Ψ.l .== Ψ.l' .&& Ψ.m_l .== Ψ.m_l' .+ 1 .&& Ψ.m_s .== Ψ.m_s' .- 1
end
#+end_src

#+begin_src julia
@doc raw"""
    L_up_S_down_kron(Ψ::Wavefunction)::BitMatrix

Use logical indexing to apply prefactors based on the Kronecker delta for the L-_S+ operator.

```math
\langle \Psi_{\ell', m_{\ell}', m_s'} | L_+S_- | \Psi_{\ell, m_{\ell}-1, m_s+1} \rangle = \delta_{l' l} \delta_{m_{\ell}' m_{\ell}} \delta_{m_s' m_s}
```
"""
function L_down_S_up_kron(Ψ::Wavefunction)::BitMatrix
    Ψ.l .== Ψ.l' .&& Ψ.m_l .== Ψ.m_l' .- 1 .&& Ψ.m_s .== Ψ.m_s' .+ 1
end
#+end_src

* Solve the Eigenvalue Problem
** Setup the Hamiltonian
Iterate over all quantum numbers to create $$\hat{H}$$ for $$n=2$$

#+begin_src julia
"""
    construct_full_H(Ψ::Wavefunction, λ::Float64)::Matrix{ComplexF64}

Construct the full Hamiltonian matrix for the given wavefunction and λ
"""
function construct_full_H(Ψ::Wavefunction, λ::Float64)::Matrix{ComplexF64}
    # Construct the Hamiltonian matrix
    H = Matrix{ComplexF64}(undef, length(Ψ.Ψ), length(Ψ.Ψ))

    # Compute the Hamiltonian matrix elements based on the prefactors and kronecker deltas
    t1 = Lz_Sz_prefactor(Ψ, λ) .* Lz_Sz_kron(Ψ)
    t2 = L_up_S_down_prefactor(Ψ, λ) .* L_up_S_down_kron(Ψ)
    t3 = L_down_S_up_prefactor(Ψ, λ) .* L_down_S_up_kron(Ψ)

    # Assign the array elements
    H .= t1 .+ t2 .+ t3
end
#+end_src

#+begin_src julia :results replace :tangle no
H = construct_full_H(Ψ, 1.0)
#+end_src

** Diagonalise the Hamiltonian
#+begin_src julia
function diagonalise(M::Matrix{ComplexF64})::Diagonal{ComplexF64, Vector{ComplexF64}}
    # Find the eigenvalues and eigenvectors of the Hamiltonian
    E = eigen(M)

    # Get the diagonal matrix of eigenvalues
    Diagonal(E.values)

    # Check that the diagonal Hamiltonian is within numerical error of D
    # P = eigen.vectors
    # @assert norm(H - (P * D * inv(P))) < 1e-10
end
#+end_src

#+begin_src julia :results replace :tangle no
diagonalise(H)
#+end_src

* Changing the Spin-Orbit Coupling Constant
Calculate and diagonalise the Hamilton whilst varying $$\lambda$$

#+begin_src julia :results replace :exports none :tangle no
Λ = collect(0.1:0.1:2)
e_vals = Matrix{ComplexF64}(undef, length(Ψ.Ψ), length(Λ))

for λ in eachindex(Λ)
    H = construct_full_H(Ψ, Λ[λ])
    H_d = diagonalise(H)
    e_vals[:, λ] .= H_d.diag
end
#+end_src

* Plot
Plot the eigenvalues for various values of \lambda

#+begin_src julia :results graphics replace :tangle no
for i in 1:length(e_vals[:, 1])
    e_val_i = e_vals[i, :]
    plot!(e_val_i, collect(1:length(e_val_i)))
end
#+end_src

* Module Cleanup
End the module that we started to define in [[setup]]

#+begin_src julia :noeval :exports none
end  # module
#+end_src
